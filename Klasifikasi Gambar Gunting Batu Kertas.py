# -*- coding: utf-8 -*-
"""Submission Nadea Putri Nur Fauzi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecYKJRYAFbshb0qZewRR3yljzySEomMg
"""

!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

import tensorflow as tf                                                          
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile, os

local_zip = '/tmp/rockpaperscissors.zip'                                         
zip_ref = zipfile.ZipFile(local_zip, 'r')                                        
zip_ref.extractall('/tmp')                                                       
zip_ref.close()                                                                  
 
train_dir = '/tmp/rockpaperscissors/rps-cv-images'
base_dir = '/tmp/rockpaperscissors/'

os.listdir(base_dir)
os.listdir(train_dir)

train_datagen = ImageDataGenerator(
      rescale = 1./255, 
      width_shift_range = 0.2,                                                    
      height_shift_range = 0.2,                                                                                                             
      shear_range = 0.1,                                                        
      zoom_range = 0.1,                                                           
      horizontal_flip=True,                                                      

      validation_split=0.4                                                       
      )

val_datagen = ImageDataGenerator(
      rescale = 1./255,                                                          
      width_shift_range = 0.2,                                                    
      height_shift_range = 0.2,                                                   
      shear_range = 0.1,                                                        
      zoom_range = 0.1,                                                           
      horizontal_flip=True,                                                      

      validation_split=0.4                                                       
      )

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size = (150, 150),
    shuffle = True,
    subset = 'training'
)

val_generator = val_datagen.flow_from_directory(
    train_dir,
    target_size = (150, 150),
    shuffle = True,
    subset = 'validation'
)

model = tf.keras.models.Sequential([                                              
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)), 
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),                         
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),                         
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),                                                    
    tf.keras.layers.Dense(128, activation='relu'),                                
    tf.keras.layers.Dense(512, activation='relu'),                               
    tf.keras.layers.Dense(3, activation='softmax')                                
])

model.summary()

model.compile(loss='categorical_crossentropy',                                    
              optimizer=tf.optimizers.Adam(),                                     
              metrics=['accuracy'])

history=model.fit(
      train_generator,                                                            
      steps_per_epoch=16,                                                         
      epochs=20,                                                                                                                
      validation_data=val_generator,                                                      
      validation_steps=4,                                                         
      verbose=2)

"""melihat data hasil akurasi dan validasi"""

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label = 'Hasil Akurasi Training')
plt.plot(epochs, val_acc, 'b', label = 'Hasil Akurasi Validasi')
plt.title('Hasil Akurasi Training dan Validasi')
plt.legend(loc = 0)
plt.figure()
plt.show()

plt.plot(epochs, loss, 'r', label = 'Hasil Loss Training')
plt.plot(epochs, val_loss, 'b', label = 'Hasil Loss Validasi')
plt.title('Hasil Loss Training dan Validasi')
plt.legend(loc = 0)
plt.figure()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np                                                                
from google.colab import files                                                    
from keras.preprocessing import image                                             
import matplotlib.pyplot as plt                                                   
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
 
  path = fn                                                                       
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0]==1:
    print('Ini adalah Kertas')
  elif classes[0][1]==1:
    print('Ini adalah Batu')
  elif classes[0][2]==1:
    print('Ini adalah Gunting')
  else:
    print('Tidak diketahui')

